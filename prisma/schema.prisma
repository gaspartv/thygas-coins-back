generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  EN_US
  PT_BR

  @@map("language")
}

enum UserPolice {
  NORMAL @map("normal")
  ADMIN  @map("admin")
  SUPER  @map("super")

  @@map("user_polices")
}

enum TokenType {
  EMAIL    @map("email")
  PASSWORD @map("password")

  @@map("token_type")
}

model User {
  id               String     @id @default(uuid()) @db.Uuid
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  disabledAt       DateTime?
  deletedAt        DateTime?
  firstName        String
  lastName         String
  email            String     @unique
  password         String
  imageUri         String?
  identityDocument String     @unique
  whatsapp         String     @unique
  darkMode         Boolean    @default(false)
  language         Language   @default(PT_BR)
  police           UserPolice @default(NORMAL)

  Tokens      Token[]
  Sessions    Session[]
  Maintenance SystemMaintenance[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime
  revokedAt DateTime?
  usedAt    DateTime?
  type      TokenType

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map("tokens")
}

model Session {
  id             String    @id @default(uuid()) @db.Uuid
  connectedAt    DateTime  @default(now())
  disconnectedAt DateTime?
  expiresAt      DateTime
  token          String

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map("sessions")
} 

model SystemMaintenance {
  id               String    @id @default(uuid()) @db.Uuid
  startMaintenance DateTime  @default(now())
  endMaintenance   DateTime?
  description      String?

  User   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@map("system-maintenance")
}
